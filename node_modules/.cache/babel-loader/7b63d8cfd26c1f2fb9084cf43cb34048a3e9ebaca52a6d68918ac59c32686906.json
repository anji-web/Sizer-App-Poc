{"ast":null,"code":"var _jsxFileName = \"/Users/anjidananto/Projects/ARDemoApps/sizer-app-poc/src/components/Camera.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { FilesetResolver, PoseLandmarker, DrawingUtils } from \"@mediapipe/tasks-vision\";\nimport Webcam from \"react-webcam\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CameraComponent = ({\n  onMeasurement,\n  onPoseDetected,\n  isMeasuring,\n  userHeight\n}) => {\n  _s();\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [poseLandmarker, setPoseLandmarker] = useState(null);\n  const [isCorrectPose, setIsCorrectPose] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasSent, setHasSent] = useState(false);\n\n  // Calculate Euclidean distance between two points\n  const distance = (a, b) => Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));\n\n  // Calculate circumference using multiple points (approximation)\n  const circumference = points => {\n    let total = 0;\n    for (let i = 0; i < points.length - 1; i++) {\n      total += distance(points[i], points[i + 1]);\n    }\n    return total;\n  };\n\n  // Convert pixel measurements to centimeters\n  const convertToCm = (pixelValue, landmarks, userHeightCm) => {\n    console.log(`User height = ${userHeightCm}`);\n    const nose = landmarks[0]; // Landmark 0: nose\n    const leftFoot = landmarks[30]; // Landmark 30: left foot index\n    const rightFoot = landmarks[31]; // Landmark 31: right foot index\n\n    // Use average foot position if both visible\n    const footY = leftFoot && rightFoot ? (leftFoot.y + rightFoot.y) / 2 : (leftFoot === null || leftFoot === void 0 ? void 0 : leftFoot.y) || (rightFoot === null || rightFoot === void 0 ? void 0 : rightFoot.y);\n    const pixelHeight = Math.abs(nose.y - footY);\n    const scale = userHeightCm / pixelHeight;\n    return (pixelValue * scale).toFixed(2);\n  };\n\n  // Calculate all body measurements\n  const calculateMeasurements = landmarks => {\n    // Key Landmarks:\n    // 11: Left shoulder, 12: Right shoulder\n    // 13: Left elbow, 14: Right elbow\n    // 15: Left wrist, 16: Right wrist\n    // 23: Left hip, 24: Right hip\n    // 25: Left knee, 26: Right knee\n    // 0: Nose, 7: Left ear, 8: Right ear\n\n    // 1. Lingkar Dada (Chest Circumference)\n    const chestPoints = [landmarks[11],\n    // Left shoulder\n    {\n      x: (landmarks[11].x + landmarks[12].x) / 2,\n      y: (landmarks[11].y + landmarks[12].y) / 2\n    },\n    // Midpoint\n    landmarks[12] // Right shoulder\n    ];\n    const chestPixels = circumference(chestPoints) * 2.2; // Approximation factor\n\n    // 2. Lingkar Perut (Waist Circumference)\n    const waistPoints = [landmarks[23],\n    // Left hip\n    {\n      x: (landmarks[23].x + landmarks[24].x) / 2,\n      y: (landmarks[23].y + landmarks[24].y) / 2\n    },\n    // Midpoint\n    landmarks[24] // Right hip\n    ];\n    const waistPixels = circumference(waistPoints) * 1.8; // Approximation factor\n\n    // 3. Lingkar Pinggul (Hip Circumference)\n    const hipPixels = distance(landmarks[23], landmarks[24]) * 3.2; // Approximation\n\n    // 4. Lebar Dada (Chest Width)\n    const chestWidthPixels = distance(landmarks[11], landmarks[12]);\n\n    // 5. Lebar Bahu (Shoulder Width)\n    const shoulderWidthPixels = distance(landmarks[11], landmarks[12]);\n\n    // 6. Punggung (Back Length)\n    const backLengthPixels = distance({\n      x: (landmarks[11].x + landmarks[12].x) / 2,\n      y: (landmarks[11].y + landmarks[12].y) / 2\n    }, {\n      x: (landmarks[23].x + landmarks[24].x) / 2,\n      y: (landmarks[23].y + landmarks[24].y) / 2\n    });\n\n    // 7. Lebar Pundak (Shoulder Breadth)\n    const shoulderBreadthPixels = distance(landmarks[11], landmarks[12]);\n\n    // 8. Panjang Tangan (Arm Length)\n    const leftArmLengthPixels = distance(landmarks[11], landmarks[13]) + distance(landmarks[13], landmarks[15]);\n\n    // 9. Bisep (Bicep Circumference)\n    const leftBicepPixels = distance(landmarks[11], landmarks[13]) * 0.6; // Approximation\n\n    // 10. Lingkar Leher (Neck Circumference)\n    const neckPixels = distance(landmarks[7], landmarks[8]) * 2.5; // Approximation\n\n    // Convert all to cm\n    return {\n      chest: convertToCm(chestPixels, landmarks, userHeight),\n      waist: convertToCm(waistPixels, landmarks, userHeight),\n      hips: convertToCm(hipPixels, landmarks, userHeight),\n      chestWidth: convertToCm(chestWidthPixels, landmarks, userHeight),\n      shoulderWidth: convertToCm(shoulderWidthPixels, landmarks, userHeight),\n      backLength: convertToCm(backLengthPixels, landmarks, userHeight),\n      shoulderBreadth: convertToCm(shoulderBreadthPixels, landmarks, userHeight),\n      armLength: convertToCm(leftArmLengthPixels, landmarks, userHeight),\n      bicep: convertToCm(leftBicepPixels, landmarks, userHeight),\n      neck: convertToCm(neckPixels, landmarks, userHeight)\n    };\n  };\n\n  // Validate standing pose\n  const validatePose = landmarks => {\n    if (!landmarks || landmarks.length < 25) return false;\n    const leftShoulder = landmarks[11];\n    const rightShoulder = landmarks[12];\n    const leftHip = landmarks[23];\n    const rightHip = landmarks[24];\n\n    // Check if shoulders are level\n    const shoulderLevelDiff = Math.abs(leftShoulder.y - rightShoulder.y);\n    // Check if hips are level\n    const hipLevelDiff = Math.abs(leftHip.y - rightHip.y);\n    const isValid = shoulderLevelDiff < 0.05 && hipLevelDiff < 0.05;\n    setIsCorrectPose(isValid);\n    return isValid;\n  };\n\n  // Load model\n  useEffect(() => {\n    const init = async () => {\n      const vision = await FilesetResolver.forVisionTasks(\"https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision@latest/wasm\");\n      const landmarker = await PoseLandmarker.createFromOptions(vision, {\n        baseOptions: {\n          modelAssetPath: \"https://storage.googleapis.com/mediapipe-models/pose_landmarker/pose_landmarker_full/float16/latest/pose_landmarker_full.task\",\n          delegate: \"GPU\"\n        },\n        runningMode: \"VIDEO\",\n        numPoses: 1\n      });\n      setPoseLandmarker(landmarker);\n    };\n    init();\n  }, []);\n\n  // Detection loop\n  useEffect(() => {\n    let animationFrame;\n    const runDetection = async () => {\n      if (webcamRef.current && webcamRef.current.video.readyState === 4 && poseLandmarker) {\n        const video = webcamRef.current.video;\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n        const result = poseLandmarker.detectForVideo(video, performance.now());\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        const drawingUtils = new DrawingUtils(ctx);\n        if (result.landmarks.length > 0) {\n          const landmarks = result.landmarks[0];\n          onPoseDetected(landmarks);\n\n          // Draw key landmarks\n          const KEYPOINTS = [0, 7, 8, 11, 12, 13, 14, 15, 16, 23, 24, 25, 26, 27, 28];\n          drawingUtils.drawLandmarks(landmarks.filter((_, i) => KEYPOINTS.includes(i)), {\n            color: isCorrectPose ? \"#00FF00\" : \"#FF0000\",\n            radius: 4\n          });\n\n          // Take measurements when conditions are met\n          const valid = validatePose(landmarks);\n          if (valid && isMeasuring && !isLoading && !hasSent) {\n            const measurements = calculateMeasurements(landmarks);\n            console.log(\"Body Measurements:\", measurements);\n            onMeasurement(measurements);\n            setHasSent(true);\n          }\n        }\n      }\n      animationFrame = requestAnimationFrame(runDetection);\n    };\n    if (poseLandmarker) {\n      animationFrame = requestAnimationFrame(runDetection);\n    }\n    return () => {\n      cancelAnimationFrame(animationFrame);\n    };\n  }, [poseLandmarker, isCorrectPose, isLoading, isMeasuring, hasSent]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"camera-container\",\n    style: {\n      position: \"relative\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Webcam, {\n      ref: webcamRef,\n      mirrored: true,\n      style: {\n        width: \"100%\",\n        height: \"auto\",\n        position: \"relative\",\n        zIndex: 1\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        width: \"100%\",\n        height: \"100%\",\n        zIndex: 2\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Measuring...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n};\n_s(CameraComponent, \"ya04P9yhf1ZPLIn/ge8ur8oLE4g=\");\n_c = CameraComponent;\nexport default CameraComponent;\nvar _c;\n$RefreshReg$(_c, \"CameraComponent\");","map":{"version":3,"names":["React","useEffect","useRef","useState","FilesetResolver","PoseLandmarker","DrawingUtils","Webcam","jsxDEV","_jsxDEV","CameraComponent","onMeasurement","onPoseDetected","isMeasuring","userHeight","_s","webcamRef","canvasRef","poseLandmarker","setPoseLandmarker","isCorrectPose","setIsCorrectPose","isLoading","setIsLoading","hasSent","setHasSent","distance","a","b","Math","sqrt","pow","x","y","circumference","points","total","i","length","convertToCm","pixelValue","landmarks","userHeightCm","console","log","nose","leftFoot","rightFoot","footY","pixelHeight","abs","scale","toFixed","calculateMeasurements","chestPoints","chestPixels","waistPoints","waistPixels","hipPixels","chestWidthPixels","shoulderWidthPixels","backLengthPixels","shoulderBreadthPixels","leftArmLengthPixels","leftBicepPixels","neckPixels","chest","waist","hips","chestWidth","shoulderWidth","backLength","shoulderBreadth","armLength","bicep","neck","validatePose","leftShoulder","rightShoulder","leftHip","rightHip","shoulderLevelDiff","hipLevelDiff","isValid","init","vision","forVisionTasks","landmarker","createFromOptions","baseOptions","modelAssetPath","delegate","runningMode","numPoses","animationFrame","runDetection","current","video","readyState","canvas","ctx","getContext","width","videoWidth","height","videoHeight","result","detectForVideo","performance","now","clearRect","drawImage","drawingUtils","KEYPOINTS","drawLandmarks","filter","_","includes","color","radius","valid","measurements","requestAnimationFrame","cancelAnimationFrame","className","style","position","children","ref","mirrored","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","top","left","_c","$RefreshReg$"],"sources":["/Users/anjidananto/Projects/ARDemoApps/sizer-app-poc/src/components/Camera.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { FilesetResolver, PoseLandmarker, DrawingUtils } from \"@mediapipe/tasks-vision\";\nimport Webcam from \"react-webcam\";\n\nconst CameraComponent = ({ onMeasurement, onPoseDetected, isMeasuring, userHeight }) => {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [poseLandmarker, setPoseLandmarker] = useState(null);\n  const [isCorrectPose, setIsCorrectPose] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasSent, setHasSent] = useState(false);\n\n  // Calculate Euclidean distance between two points\n  const distance = (a, b) => \n    Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));\n\n  // Calculate circumference using multiple points (approximation)\n  const circumference = (points) => {\n    let total = 0;\n    for (let i = 0; i < points.length - 1; i++) {\n      total += distance(points[i], points[i + 1]);\n    }\n    return total;\n  };\n\n  // Convert pixel measurements to centimeters\n  const convertToCm = (pixelValue, landmarks, userHeightCm) => {\n    console.log(`User height = ${userHeightCm}`)\n    const nose = landmarks[0];    // Landmark 0: nose\n    const leftFoot = landmarks[30]; // Landmark 30: left foot index\n    const rightFoot = landmarks[31]; // Landmark 31: right foot index\n    \n    // Use average foot position if both visible\n    const footY = leftFoot && rightFoot ? \n      (leftFoot.y + rightFoot.y) / 2 : \n      (leftFoot?.y || rightFoot?.y);\n    \n    const pixelHeight = Math.abs(nose.y - footY);\n    const scale = userHeightCm / pixelHeight;\n    return (pixelValue * scale).toFixed(2);\n  };\n\n  // Calculate all body measurements\n  const calculateMeasurements = (landmarks) => {\n    // Key Landmarks:\n    // 11: Left shoulder, 12: Right shoulder\n    // 13: Left elbow, 14: Right elbow\n    // 15: Left wrist, 16: Right wrist\n    // 23: Left hip, 24: Right hip\n    // 25: Left knee, 26: Right knee\n    // 0: Nose, 7: Left ear, 8: Right ear\n    \n    // 1. Lingkar Dada (Chest Circumference)\n    const chestPoints = [\n      landmarks[11], // Left shoulder\n      { x: (landmarks[11].x + landmarks[12].x) / 2, y: (landmarks[11].y + landmarks[12].y) / 2 }, // Midpoint\n      landmarks[12]  // Right shoulder\n    ];\n    const chestPixels = circumference(chestPoints) * 2.2; // Approximation factor\n    \n    // 2. Lingkar Perut (Waist Circumference)\n    const waistPoints = [\n      landmarks[23], // Left hip\n      { x: (landmarks[23].x + landmarks[24].x) / 2, y: (landmarks[23].y + landmarks[24].y) / 2 }, // Midpoint\n      landmarks[24]  // Right hip\n    ];\n    const waistPixels = circumference(waistPoints) * 1.8; // Approximation factor\n    \n    // 3. Lingkar Pinggul (Hip Circumference)\n    const hipPixels = distance(landmarks[23], landmarks[24]) * 3.2; // Approximation\n    \n    // 4. Lebar Dada (Chest Width)\n    const chestWidthPixels = distance(landmarks[11], landmarks[12]);\n    \n    // 5. Lebar Bahu (Shoulder Width)\n    const shoulderWidthPixels = distance(landmarks[11], landmarks[12]);\n    \n    // 6. Punggung (Back Length)\n    const backLengthPixels = distance(\n      { x: (landmarks[11].x + landmarks[12].x) / 2, y: (landmarks[11].y + landmarks[12].y) / 2 },\n      { x: (landmarks[23].x + landmarks[24].x) / 2, y: (landmarks[23].y + landmarks[24].y) / 2 }\n    );\n    \n    // 7. Lebar Pundak (Shoulder Breadth)\n    const shoulderBreadthPixels = distance(landmarks[11], landmarks[12]);\n    \n    // 8. Panjang Tangan (Arm Length)\n    const leftArmLengthPixels = \n      distance(landmarks[11], landmarks[13]) + distance(landmarks[13], landmarks[15]);\n    \n    // 9. Bisep (Bicep Circumference)\n    const leftBicepPixels = distance(landmarks[11], landmarks[13]) * 0.6; // Approximation\n    \n    // 10. Lingkar Leher (Neck Circumference)\n    const neckPixels = distance(landmarks[7], landmarks[8]) * 2.5; // Approximation\n    \n    // Convert all to cm\n    return {\n      chest: convertToCm(chestPixels, landmarks, userHeight),\n      waist: convertToCm(waistPixels, landmarks, userHeight),\n      hips: convertToCm(hipPixels, landmarks, userHeight),\n      chestWidth: convertToCm(chestWidthPixels, landmarks, userHeight),\n      shoulderWidth: convertToCm(shoulderWidthPixels, landmarks, userHeight),\n      backLength: convertToCm(backLengthPixels, landmarks, userHeight),\n      shoulderBreadth: convertToCm(shoulderBreadthPixels, landmarks, userHeight),\n      armLength: convertToCm(leftArmLengthPixels, landmarks, userHeight),\n      bicep: convertToCm(leftBicepPixels, landmarks, userHeight),\n      neck: convertToCm(neckPixels, landmarks, userHeight)\n    };\n  };\n\n  // Validate standing pose\n  const validatePose = (landmarks) => {\n    if (!landmarks || landmarks.length < 25) return false;\n    \n    const leftShoulder = landmarks[11];\n    const rightShoulder = landmarks[12];\n    const leftHip = landmarks[23];\n    const rightHip = landmarks[24];\n    \n    // Check if shoulders are level\n    const shoulderLevelDiff = Math.abs(leftShoulder.y - rightShoulder.y);\n    // Check if hips are level\n    const hipLevelDiff = Math.abs(leftHip.y - rightHip.y);\n    \n    const isValid = shoulderLevelDiff < 0.05 && hipLevelDiff < 0.05;\n    setIsCorrectPose(isValid);\n    return isValid;\n  };\n\n  // Load model\n  useEffect(() => {\n    const init = async () => {\n      const vision = await FilesetResolver.forVisionTasks(\n        \"https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision@latest/wasm\"\n      );\n\n      const landmarker = await PoseLandmarker.createFromOptions(vision, {\n        baseOptions: {\n          modelAssetPath:\n            \"https://storage.googleapis.com/mediapipe-models/pose_landmarker/pose_landmarker_full/float16/latest/pose_landmarker_full.task\",\n          delegate: \"GPU\",\n        },\n        runningMode: \"VIDEO\",\n        numPoses: 1,\n      });\n\n      setPoseLandmarker(landmarker);\n    };\n\n    init();\n  }, []);\n\n  // Detection loop\n  useEffect(() => {\n    let animationFrame;\n\n    const runDetection = async () => {\n      if (\n        webcamRef.current &&\n        webcamRef.current.video.readyState === 4 &&\n        poseLandmarker\n      ) {\n        const video = webcamRef.current.video;\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n\n        const result = poseLandmarker.detectForVideo(video, performance.now());\n\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n        const drawingUtils = new DrawingUtils(ctx);\n\n        if (result.landmarks.length > 0) {\n          const landmarks = result.landmarks[0];\n          onPoseDetected(landmarks);\n\n          // Draw key landmarks\n          const KEYPOINTS = [0, 7, 8, 11, 12, 13, 14, 15, 16, 23, 24, 25, 26, 27, 28];\n          drawingUtils.drawLandmarks(\n            landmarks.filter((_, i) => KEYPOINTS.includes(i)),\n            {\n              color: isCorrectPose ? \"#00FF00\" : \"#FF0000\",\n              radius: 4,\n            }\n          );\n\n          // Take measurements when conditions are met\n          const valid = validatePose(landmarks);\n          if (valid && isMeasuring && !isLoading && !hasSent) {\n            const measurements = calculateMeasurements(landmarks);\n            console.log(\"Body Measurements:\", measurements);\n            onMeasurement(measurements);\n            setHasSent(true);\n          }\n        }\n      }\n      animationFrame = requestAnimationFrame(runDetection);\n    };\n\n    if (poseLandmarker) {\n      animationFrame = requestAnimationFrame(runDetection);\n    }\n\n    return () => {\n      cancelAnimationFrame(animationFrame);\n    };\n  }, [poseLandmarker, isCorrectPose, isLoading, isMeasuring, hasSent]);\n\n  return (\n    <div className=\"camera-container\" style={{ position: \"relative\" }}>\n      <Webcam\n        ref={webcamRef}\n        mirrored\n        style={{ width: \"100%\", height: \"auto\", position: \"relative\", zIndex: 1 }}\n      />\n      <canvas\n        ref={canvasRef}\n        style={{\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          width: \"100%\",\n          height: \"100%\",\n          zIndex: 2,\n        }}\n      />\n      {isLoading && (\n        <div className=\"loading-overlay\">\n          <p>Measuring...</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CameraComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}